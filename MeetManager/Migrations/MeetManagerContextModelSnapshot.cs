// <auto-generated />
using MeetManager.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MeetManager.Migrations
{
    [DbContext(typeof(MeetManagerContext))]
    partial class MeetManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MeetManager.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("WorldRecord");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MeetManager.Models.Meet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<int?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Meets");
                });

            modelBuilder.Entity("MeetManager.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EventId");

                    b.Property<int?>("MeetId");

                    b.Property<int?>("RunnerId");

                    b.Property<string>("Time");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MeetId");

                    b.HasIndex("RunnerId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("MeetManager.Models.Runner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EventGroup");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int?>("TeamId");

                    b.Property<string>("Year");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Runners");
                });

            modelBuilder.Entity("MeetManager.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Coach");

                    b.Property<string>("CollegeName");

                    b.Property<string>("Conference");

                    b.Property<string>("Location");

                    b.Property<string>("Mascot");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("MeetManager.Models.TeamMeet", b =>
                {
                    b.Property<int>("TeamId");

                    b.Property<int>("MeetId");

                    b.HasKey("TeamId", "MeetId");

                    b.HasIndex("MeetId");

                    b.ToTable("TeamMeet");
                });

            modelBuilder.Entity("MeetManager.Models.Meet", b =>
                {
                    b.HasOne("MeetManager.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("MeetManager.Models.Race", b =>
                {
                    b.HasOne("MeetManager.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("MeetManager.Models.Meet", "Meet")
                        .WithMany("Races")
                        .HasForeignKey("MeetId");

                    b.HasOne("MeetManager.Models.Runner", "Runner")
                        .WithMany("Races")
                        .HasForeignKey("RunnerId");
                });

            modelBuilder.Entity("MeetManager.Models.Runner", b =>
                {
                    b.HasOne("MeetManager.Models.Team", "Team")
                        .WithMany("Runners")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("MeetManager.Models.TeamMeet", b =>
                {
                    b.HasOne("MeetManager.Models.Meet", "Meet")
                        .WithMany("TeamMeets")
                        .HasForeignKey("MeetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeetManager.Models.Team", "Team")
                        .WithMany("TeamMeets")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
